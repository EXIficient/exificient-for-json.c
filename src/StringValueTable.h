/*
 * Copyright (C) 2007-2016 Siemens AG
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, 
 * including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or 
 * substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION 
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/*******************************************************************
 *
 * @author Daniel.Peintner.EXT@siemens.com
 * @version 2016-02-03 
 * @contact Joerg.Heuer@siemens.com
 *
 * <p>Code generated by EXIdizer</p>
 * <p>Schema: schema-for-json.xsd</p>
 *
 *
 ********************************************************************/



/**
 * \file 	StringValueTable.h
 * \brief 	Value string table implementation
 *
 */

#ifndef STRING_VALUE_TABLE_H
#define STRING_VALUE_TABLE_H

#ifdef __cplusplus
extern "C" {
#endif


#include "EXITypes.h"


/**
 * \brief  		Init value string tables & partitions
 *
 * 				Resets string value entries
 *
 * \param       valueTable			Value Table
 * \return                  		Error-Code <> 0
 *
 */
int exiInitValueStrings(exi_value_table_t* valueTable);


/**
 * \brief  		Add string value
 *
 * \param       valueTable			Value Table
 * \param       sv					String value to add
 * \param       qnameID				Qualified Name ID
 * \return                  		Error-Code <> 0
 *
 */
int exiAddStringValue(exi_value_table_t* valueTable,
		exi_string_t* sv, uint16_t qnameID);


/**
 * \brief  		Get number of local string values
 *
 * \param       valueTable			Value Table
 * \param       qnameID				Qualified Name ID
 * \param       numberOfEntries		Number of local entries for given qname ID
 * \return                  		Error-Code <> 0
 *
 */
int exiGetNumberOfLocalStringValueEntries(exi_value_table_t* valueTable,
		uint16_t qnameID, uint16_t* numberOfEntries);


/**
 * \brief  		Get global string value hit
 *
 * \param       valueTable			Value Table
 * \param       globalID			Global Value ID
 * \param       sv					Returned Global String value
 * \return                  		Error-Code <> 0
 *
 */
int exiGetGlobalStringValue(exi_value_table_t* valueTable,
		uint16_t globalID, exi_string_t* sv);


/**
 * \brief  		Get local string value hit
 *
 * \param       valueTable			Value Table
 * \param       qnameID				Qualified Name ID
 * \param       localID				Local Value ID
 * \param       sv					Returned Local String value
 * \return                  		Error-Code <> 0
 *
 */
int exiGetLocalStringValue(exi_value_table_t* valueTable,
		uint16_t qnameID, uint16_t localID, exi_string_t* sv);



#ifdef __cplusplus
}
#endif

#endif
